Directions on getting the board up and running
See Cmds.txt for a command reference

The EEPROM needs to be programed with circuit default values. We can make this happen automatically later on.
There are two copies of the configuration state at any point in time on in ram and another in EEPROM.
First set the defaults of the RAM circuit configuration using the D command. Verify they are set using e.
Then save them into memory using E. 
Program them manually using P. (This is just for testing purposes now. Later on the programming will happen every startup and communications failure or reset.)

Set the reporting interval using T in seconds. Then enter meter mode using M.


HALTON
- Make sure that deployment meters all use one serial port or mirror output to both for monitoring.
- Consistency in newlines
- Have race where meter outputs after a \r has been read
- Need to reset flags after reading a value in meter mode
- Fix meter mode parsing

Awaiting Test:
- Get Circuit up and running with new parameters and outputing reasonable results awaiting tests
- Get calibration and saving routine working
- Add functionality to interactive mode 
-- to set a reporting period for metering data.
- Add a metering mode that has the following components
-- Regular reporting accord to the above configuration
-- Switching
-- Go to interactive mode

OVERALL TODO FOR HAITI:
- Circuits code fills in obvious junk values if there is a comm error
- Add functionality to interactive mode 
-- Autodetect number of active circuits
-- to set number of actual circuits
-- Meter all as in clear the LINCYC interrupts for all of them and then wait for results
-- set PMAX
- Add a metering mode that has the following components
-- Immediate switch-off for violating PMAX
- Fill in values for switch and select mappings for all dbs
- Power offset fix
- Add an escape character or set of characters
- Active power isn't working
- Regularize the interactive mode grammer.

Cleanup
- Separate all printing from processing 
- Make Circuit into a real objects
- make initialization naming conventions sane
- Create a constants file to initialize switch data so that all constants are in one place.

ReturnValues
- refactor RC to be more like errno
- refactor all classes which use RC to use the errno like behaviour
- Change the Demux and gsm return codes.

SD
- SD_raw_init is not working, not sure why.
- Write code to lightup mount light
- Make use of the available and write protect functionality in the RR library
- For reliabilty the SD card should be run at a lower speed in the Khz range.
- The raw library seems to assume availability of the SD card. It is imperative that we make sure that the Ronald Reigel library doesn't cache writes and try to write when we are communicating with the ADE.
- Pins must be changed in sd_raw_config.h PL2 is used for the SD card SS. Therefor SS must be changed and the select/unselect functions.
- Additionally, as the 1280 uses the same SPI ports as the 128(?) I added a simple #define which configures the ports similarly. I might be wrong about that though.
- The lock (WP) and available(Card detect) pins must also be set to: 48/49 PL1,PL0 and the must also be configured nicely.
- When the switch is flipped the AtMega should synchronize the data and make sure that the card is ready to be unmounted.
- Should wrap Riegel's calls so that no accidents happen. Perhaps select/unselect should be rewritten to use CSselectDevice in select file.
- Forgot to call the init routine!

ADE
- How does the ADE handle getting an 8-bit 2s complement number for a 6 bit register?
- Need to error check input ranges before sending to ADE
- Need to make sure that x bits are being used for numerical data.
- Write handlers for calibration
- refactor get/set register to not use pointer.
- VAslope and Wslope should be fixed parameters and then Wgain and VAgain should be set during calibration.

Docs
- add reference in doxygen
- Use Doxygen to automatically generate documentation
- Create patches for Ronald Reigel Libraries which specify used ports for select, available, and locked.

LOGGING:

QUERYING:
- make sure that any variable length operations have a timeout built-in.

Doxygen Basics:
- http://www.agapow.net/programming/all-the-rest/doxygen-cheatsheet is a good guide for the basics
- file must have /** @file */  at the begining to document the file.
- Long block of documentation, which can be put before the item being documented.
	/**
		Long description, usually but before function.
	*/
- Long block of documenation, which can be put at the same line as the item being documented.
	/**<    Long description, at the same line as, for instance, a variable.
- /** @warning Warning message */
- /** @todo ToDo message */
- see: http://www.stack.nl/~dimitri/doxygen/docblocks.html for more information.
- A cheatsheet has been placed in the ...Berkeley_Docs/ directory.


ARCHITECTURE
(TODO pull data out of Rajesh's code)

ADE7753
ShiftRegister
Demux
SDRAW -> SDFAT32
Debug
	- Manages LEDs
	- Manages Serial Debug
Accounts
	- tracks energy credits
	- account status (FreePlay,Calibrating,PriceMode(i.e. DAY,NIGHT))
	- pricing models
Circuits	
	- manages each circuits state	
		- enabled/disabled
		- current/power limits
		- switching
	- tracks uncharged energy

//There's a circular dependency for the below functions so perhaps they should be integrated.
//Perhaps the QueryEngine should have a set of recurrent query jobs that are completed after a time interval.
Logger
	- Formats data from some QueryEngine functions and writes it out
	- Manages SD Card and Buffer if the card is disconnected.
	- Takes timestamp, type, string, [id]
QueryEngine 
	- Aggregates data from Logger, Circuits, and Accounts
	- Formats for GSM or logging
	- Sends to GSM, logger
